{"name": "Проврека изменения валюты на главной странице", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=138.0.7204.35)\nStacktrace:\n0   chromedriver                        0x0000000100a71660 cxxbridge1$str$ptr + 2724392\n1   chromedriver                        0x0000000100a695d8 cxxbridge1$str$ptr + 2691488\n2   chromedriver                        0x00000001005ba0fc cxxbridge1$string$len + 90068\n3   chromedriver                        0x00000001005b2778 cxxbridge1$string$len + 58960\n4   chromedriver                        0x00000001005a53d8 cxxbridge1$string$len + 4784\n5   chromedriver                        0x00000001005a6dd8 cxxbridge1$string$len + 11440\n6   chromedriver                        0x00000001005a582c cxxbridge1$string$len + 5892\n7   chromedriver                        0x00000001005a5180 cxxbridge1$string$len + 4184\n8   chromedriver                        0x00000001005a4ecc cxxbridge1$string$len + 3492\n9   chromedriver                        0x00000001005a2c84 chromedriver + 191620\n10  chromedriver                        0x00000001005a36e0 chromedriver + 194272\n11  chromedriver                        0x00000001005bd160 cxxbridge1$string$len + 102456\n12  chromedriver                        0x000000010064330c cxxbridge1$string$len + 651748\n13  chromedriver                        0x0000000100642874 cxxbridge1$string$len + 649036\n14  chromedriver                        0x00000001005f5790 cxxbridge1$string$len + 333416\n15  chromedriver                        0x0000000100a35440 cxxbridge1$str$ptr + 2478088\n16  chromedriver                        0x0000000100a386a8 cxxbridge1$str$ptr + 2490992\n17  chromedriver                        0x0000000100a16328 cxxbridge1$str$ptr + 2350832\n18  chromedriver                        0x0000000100a38f64 cxxbridge1$str$ptr + 2493228\n19  chromedriver                        0x0000000100a07414 cxxbridge1$str$ptr + 2289628\n20  chromedriver                        0x0000000100a59090 cxxbridge1$str$ptr + 2624600\n21  chromedriver                        0x0000000100a5921c cxxbridge1$str$ptr + 2624996\n22  chromedriver                        0x0000000100a69214 cxxbridge1$str$ptr + 2690524\n23  libsystem_pthread.dylib             0x000000019397ec0c _pthread_start + 136\n24  libsystem_pthread.dylib             0x0000000193979b80 thread_start + 8", "trace": "request = <SubRequest 'browser' for <Function test_currency_change_main_page>>\n\n    @pytest.fixture()\n    def browser(request):\n        browser_name = request.config.getoption(\"browser\").lower()\n        browser_version = request.config.getoption(\"browser_version\")\n        headless = request.config.getoption(\"headless\")\n        url = request.config.getoption(\"url\")\n        log_level = request.config.getoption(\"log_level\")\n        use_selenoid = request.config.getoption(\"selenoid\")\n        selenoid_url = request.config.getoption(\"selenoid_url\")\n    \n        logs_dir = \"logs\"\n        if not os.path.exists(logs_dir):\n            os.makedirs(logs_dir)\n    \n        logger = logging.getLogger(request.node.name)\n        file_handler = logging.FileHandler(f\"{logs_dir}/{request.node.name}.log\")\n        file_handler.setFormatter(logging.Formatter('%(levelname)s %(message)s'))\n        logger.addHandler(file_handler)\n        logger.setLevel(level=log_level)\n    \n        logger.info(\"===> Test started at %s\" % datetime.datetime.now())\n    \n        if use_selenoid:\n            if browser_name == \"chrome\":\n                options = ChromeOptions()\n                options.set_capability(\"browserName\", \"chrome\")\n                options.set_capability(\"browserVersion\", browser_version)\n                options.set_capability(\"selenoid:options\", {\n                    \"enableVNC\": True,\n                    \"enableVideo\": False,\n                    \"enableLog\": True,\n                })\n                if headless:\n                    options.add_argument(\"--headless=new\")\n            elif browser_name == \"firefox\":\n                options = FFOptions()\n                options.set_capability(\"browserName\", \"firefox\")\n                options.set_capability(\"browserVersion\", browser_version)\n                options.set_capability(\"selenoid:options\", {\n                    \"enableVNC\": True,\n                    \"enableVideo\": False,\n                    \"enableLog\": True,\n                })\n                if headless:\n                    options.add_argument(\"--headless\")\n            elif browser_name == \"safari\":\n                options = SFOptions()\n                options.set_capability(\"browserName\", \"safari\")\n                options.set_capability(\"browserVersion\", browser_version)\n                options.set_capability(\"selenoid:options\", {\n                    \"enableVNC\": True,\n                    \"enableVideo\": False,\n                    \"enableLog\": True,\n                })\n                if headless:\n                    options.add_argument(\"--headless\")\n            elif browser_name == \"yandex\":\n                options = ChromeOptions()\n                options.set_capability(\"browserName\", \"chrome\")  # Yandex использует движок Chrome\n                options.set_capability(\"browserVersion\", browser_version)\n                options.set_capability(\"selenoid:options\", {\n                    \"enableVNC\": True,\n                    \"enableVideo\": False,\n                    \"enableLog\": True,\n                })\n                if headless:\n                    options.add_argument(\"--headless=new\")\n    \n            driver = webdriver.Remote(\n                command_executor=selenoid_url,\n                options=options\n            )\n        else:\n            if browser_name == \"chrome\":\n                options = ChromeOptions()\n                if headless:\n                    options.add_argument(\"--headless=new\")\n                driver = webdriver.Chrome(options=options)\n            elif browser_name == \"firefox\":\n                options = FFOptions()\n                if headless:\n                    options.add_argument(\"--headless\")\n                driver = webdriver.Firefox(options=options)\n            elif browser_name == \"safari\":\n                options = SFOptions()\n                if headless:\n                    options.add_argument(\"--headless\")\n                driver = webdriver.Safari(options=options)\n            elif browser_name == \"yandex\":\n                options = ChromeOptions()\n                if headless:\n                    options.add_argument(\"--headless=new\")\n                options.binary_location = \"/Applications/Yandex.app\"\n                driver = webdriver.Chrome(options=options)\n    \n        driver.maximize_window()\n>       driver.get(url)\n\n../../conftest.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10207c6d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...00019397ec0c _pthread_start + 136\\\\n24  libsystem_pthread.dylib             0x0000000193979b80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=138.0.7204.35)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100a71660 cxxbridge1$str$ptr + 2724392\nE       1   chromedriver                        0x0000000100a695d8 cxxbridge1$str$ptr + 2691488\nE       2   chromedriver                        0x00000001005ba0fc cxxbridge1$string$len + 90068\nE       3   chromedriver                        0x00000001005b2778 cxxbridge1$string$len + 58960\nE       4   chromedriver                        0x00000001005a53d8 cxxbridge1$string$len + 4784\nE       5   chromedriver                        0x00000001005a6dd8 cxxbridge1$string$len + 11440\nE       6   chromedriver                        0x00000001005a582c cxxbridge1$string$len + 5892\nE       7   chromedriver                        0x00000001005a5180 cxxbridge1$string$len + 4184\nE       8   chromedriver                        0x00000001005a4ecc cxxbridge1$string$len + 3492\nE       9   chromedriver                        0x00000001005a2c84 chromedriver + 191620\nE       10  chromedriver                        0x00000001005a36e0 chromedriver + 194272\nE       11  chromedriver                        0x00000001005bd160 cxxbridge1$string$len + 102456\nE       12  chromedriver                        0x000000010064330c cxxbridge1$string$len + 651748\nE       13  chromedriver                        0x0000000100642874 cxxbridge1$string$len + 649036\nE       14  chromedriver                        0x00000001005f5790 cxxbridge1$string$len + 333416\nE       15  chromedriver                        0x0000000100a35440 cxxbridge1$str$ptr + 2478088\nE       16  chromedriver                        0x0000000100a386a8 cxxbridge1$str$ptr + 2490992\nE       17  chromedriver                        0x0000000100a16328 cxxbridge1$str$ptr + 2350832\nE       18  chromedriver                        0x0000000100a38f64 cxxbridge1$str$ptr + 2493228\nE       19  chromedriver                        0x0000000100a07414 cxxbridge1$str$ptr + 2289628\nE       20  chromedriver                        0x0000000100a59090 cxxbridge1$str$ptr + 2624600\nE       21  chromedriver                        0x0000000100a5921c cxxbridge1$str$ptr + 2624996\nE       22  chromedriver                        0x0000000100a69214 cxxbridge1$str$ptr + 2690524\nE       23  libsystem_pthread.dylib             0x000000019397ec0c _pthread_start + 136\nE       24  libsystem_pthread.dylib             0x0000000193979b80 thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException"}, "attachments": [{"name": "log", "source": "6a1773cf-b77c-446c-97f0-e17749029fba-attachment.txt", "type": "text/plain"}], "start": 1750508812561, "stop": 1750508812561, "uuid": "65fdf4ff-37ac-44ad-8502-6f0c616d59fa", "historyId": "b601a2b43b724df8683e4fd7357994e0", "testCaseId": "b601a2b43b724df8683e4fd7357994e0", "fullName": "src.tests.test_ui_opencart#test_currency_change_main_page", "labels": [{"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_ui_opencart"}, {"name": "host", "value": "maria-kosheleva"}, {"name": "thread", "value": "27926-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_ui_opencart"}]}